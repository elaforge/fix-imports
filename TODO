* done; - not done; / decided against

bug:
  - support unqualified constructors
    . e.g. NonEmpty((:|))
  * Ignore unqualified names if they're already imported from a different
    module.
  - It wants to import unqualified names defined in the module.

feature:
  - support nix-style cabal
    I need to get ghc-pkg to see the local packages... is it one of those
    hidden files?
  ambiguous import resolution:
    - Ask interactively.
      . This requires deeper integration, but vim does have menu selection
        support.
    - Write a simple tool to analyze existing code and assign priorities
      based on how often each is imported.
    - When run with a flag, add them all, but commented out, so you can pick
      on in the editor.  Maybe jump the cursor up there automatically.
    - Use haskell-names to guess the module to import based on the function
      name: http://documentup.com/haskell-suite/haskell-names
    - Use tags to guess based on the function name.
      . https://github.com/JonnyRa/vim-himposter
    - Or use HIE files to do the same.

  automatic unqualified imports:
    - any of the haskell-names, tags, or HIE above could do this.
  - I'd like a add/removed symbol if it modified an unqualified import list

  / add *all* possible imports, but comment out all but the priority one
    . This seems not great because much of the time it guesses right.
    . Then I need some notion of certainty.
    . Maybe only for local imports?  Or local imports where there isn't an
      obvious winner, where obvious winner means in the same directory?

  / Use a cabal sandbox if one is present.
  - use stack if present
    . I think just:
      if [ $use_stack ]; then
          export GHC_PACKAGE_PATH=$(stack path --ghc-package-path)
          PATH=$(stack path --compiler-bin):$PATH
      fi

  / Optionally write a cache of the package db.
    . No need, most time is spent parsing.
    . It's fast enough.
